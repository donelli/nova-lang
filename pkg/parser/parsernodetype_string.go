// Code generated by "stringer -type=ParserNodeType -trimprefix=ParserNodeType_"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Node_BinOp-1]
	_ = x[Node_Bool-2]
	_ = x[Node_Comment-3]
	_ = x[Node_DoCase-4]
	_ = x[Node_DoWhile-5]
	_ = x[Node_ForLoop-6]
	_ = x[Node_Function-7]
	_ = x[Node_If-8]
	_ = x[Node_List-9]
	_ = x[Node_Number-10]
	_ = x[Node_PrintStdout-11]
	_ = x[Node_Return-12]
	_ = x[Node_Set-13]
	_ = x[Node_String-14]
	_ = x[Node_UnaryOp-15]
	_ = x[Node_VarAccess-16]
	_ = x[Node_VarAssign-17]
	_ = x[Node_VarDeclar-18]
	_ = x[Node_FuncCall-19]
	_ = x[Node_Command-20]
	_ = x[Node_Macro-21]
}

const _ParserNodeType_name = "Node_BinOpNode_BoolNode_CommentNode_DoCaseNode_DoWhileNode_ForLoopNode_FunctionNode_IfNode_ListNode_NumberNode_PrintStdoutNode_ReturnNode_SetNode_StringNode_UnaryOpNode_VarAccessNode_VarAssignNode_VarDeclarNode_FuncCallNode_CommandNode_Macro"

var _ParserNodeType_index = [...]uint8{0, 10, 19, 31, 42, 54, 66, 79, 86, 95, 106, 122, 133, 141, 152, 164, 178, 192, 206, 219, 231, 241}

func (i ParserNodeType) String() string {
	i -= 1
	if i >= ParserNodeType(len(_ParserNodeType_index)-1) {
		return "ParserNodeType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ParserNodeType_name[_ParserNodeType_index[i]:_ParserNodeType_index[i+1]]
}
