// Code generated by "stringer -type=LexerTokenType -trimprefix=TokenType_"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_EOF-1]
	_ = x[TokenType_NewLine-2]
	_ = x[TokenType_Identifier-3]
	_ = x[TokenType_Number-4]
	_ = x[TokenType_String-5]
	_ = x[TokenType_Plus-6]
	_ = x[TokenType_PlusPlus-7]
	_ = x[TokenType_Minus-8]
	_ = x[TokenType_MinusMinus-9]
	_ = x[TokenType_Star-10]
	_ = x[TokenType_Slash-11]
	_ = x[TokenType_Percent-12]
	_ = x[TokenType_Ampersand-13]
	_ = x[TokenType_Equals-14]
	_ = x[TokenType_EqualsEquals-15]
	_ = x[TokenType_NotEqual-16]
	_ = x[TokenType_LessThan-17]
	_ = x[TokenType_GreaterThan-18]
	_ = x[TokenType_LessThanEqual-19]
	_ = x[TokenType_GreaterThanEqual-20]
	_ = x[TokenType_LeftParenthesis-21]
	_ = x[TokenType_RightParenthesis-22]
	_ = x[TokenType_Comment-23]
	_ = x[TokenType_Comma-24]
	_ = x[TokenType_LeftBracket-25]
	_ = x[TokenType_RightBracket-26]
	_ = x[TokenType_Keyword-27]
	_ = x[TokenType_QuestionMark-28]
	_ = x[TokenType_DollarSign-29]
	_ = x[TokenType_AtSign-30]
	_ = x[TokenType_Boolean-31]
	_ = x[TokenType_Dot-32]
	_ = x[TokenType_Not-33]
}

const _LexerTokenType_name = "EOFNewLineIdentifierNumberStringPlusPlusPlusMinusMinusMinusStarSlashPercentAmpersandEqualsEqualsEqualsNotEqualLessThanGreaterThanLessThanEqualGreaterThanEqualLeftParenthesisRightParenthesisCommentCommaLeftBracketRightBracketKeywordQuestionMarkDollarSignAtSignBooleanDotNot"

var _LexerTokenType_index = [...]uint16{0, 3, 10, 20, 26, 32, 36, 44, 49, 59, 63, 68, 75, 84, 90, 102, 110, 118, 129, 142, 158, 173, 189, 196, 201, 212, 224, 231, 243, 253, 259, 266, 269, 272}

func (i LexerTokenType) String() string {
	i -= 1
	if i >= LexerTokenType(len(_LexerTokenType_index)-1) {
		return "LexerTokenType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _LexerTokenType_name[_LexerTokenType_index[i]:_LexerTokenType_index[i+1]]
}
