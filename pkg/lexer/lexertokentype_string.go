// Code generated by "stringer -type=LexerTokenType -trimprefix=TokenType_"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_EOF-1]
	_ = x[TokenType_NewLine-2]
	_ = x[TokenType_Identifier-3]
	_ = x[TokenType_Number-4]
	_ = x[TokenType_String-5]
	_ = x[TokenType_Plus-6]
	_ = x[TokenType_PlusPlus-7]
	_ = x[TokenType_Minus-8]
	_ = x[TokenType_MinusMinus-9]
	_ = x[TokenType_Star-10]
	_ = x[TokenType_Slash-11]
	_ = x[TokenType_Percent-12]
	_ = x[TokenType_Ampersand-13]
	_ = x[TokenType_Equal-14]
	_ = x[TokenType_NotEqual-15]
	_ = x[TokenType_LessThan-16]
	_ = x[TokenType_GreaterThan-17]
	_ = x[TokenType_LessThanEqual-18]
	_ = x[TokenType_GreaterThanEqual-19]
	_ = x[TokenType_LeftParenthesis-20]
	_ = x[TokenType_RightParenthesis-21]
	_ = x[TokenType_Comment-22]
}

const _LexerTokenType_name = "EOFNewLineIdentifierNumberStringPlusPlusPlusMinusMinusMinusStarSlashPercentAmpersandEqualNotEqualLessThanGreaterThanLessThanEqualGreaterThanEqualLeftParenthesisRightParenthesisComment"

var _LexerTokenType_index = [...]uint8{0, 3, 10, 20, 26, 32, 36, 44, 49, 59, 63, 68, 75, 84, 89, 97, 105, 116, 129, 145, 160, 176, 183}

func (i LexerTokenType) String() string {
	i -= 1
	if i >= LexerTokenType(len(_LexerTokenType_index)-1) {
		return "LexerTokenType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _LexerTokenType_name[_LexerTokenType_index[i]:_LexerTokenType_index[i+1]]
}
