// Code generated by "stringer -type=LexerTokenType -trimprefix=TokenType_"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenType_EOF-1]
	_ = x[TokenType_NewLine-2]
	_ = x[TokenType_Identifier-3]
	_ = x[TokenType_Number-4]
	_ = x[TokenType_String-5]
	_ = x[TokenType_Plus-6]
	_ = x[TokenType_PlusPlus-7]
	_ = x[TokenType_Minus-8]
	_ = x[TokenType_MinusMinus-9]
	_ = x[TokenType_Star-10]
	_ = x[TokenType_Slash-11]
	_ = x[TokenType_Percent-12]
	_ = x[TokenType_Ampersand-13]
	_ = x[TokenType_Macro-14]
	_ = x[TokenType_Equals-15]
	_ = x[TokenType_EqualsEquals-16]
	_ = x[TokenType_NotEqual-17]
	_ = x[TokenType_LessThan-18]
	_ = x[TokenType_GreaterThan-19]
	_ = x[TokenType_LessThanEqual-20]
	_ = x[TokenType_GreaterThanEqual-21]
	_ = x[TokenType_LeftParenthesis-22]
	_ = x[TokenType_RightParenthesis-23]
	_ = x[TokenType_Comment-24]
	_ = x[TokenType_Comma-25]
	_ = x[TokenType_LeftBracket-26]
	_ = x[TokenType_RightBracket-27]
	_ = x[TokenType_Keyword-28]
	_ = x[TokenType_QuestionMark-29]
	_ = x[TokenType_DollarSign-30]
	_ = x[TokenType_AtSign-31]
	_ = x[TokenType_Boolean-32]
	_ = x[TokenType_Dot-33]
	_ = x[TokenType_Not-34]
	_ = x[TokenType_Date-35]
	_ = x[TokenType_Path-36]
	_ = x[TokenType_Exponential-37]
}

const _LexerTokenType_name = "EOFNewLineIdentifierNumberStringPlusPlusPlusMinusMinusMinusStarSlashPercentAmpersandMacroEqualsEqualsEqualsNotEqualLessThanGreaterThanLessThanEqualGreaterThanEqualLeftParenthesisRightParenthesisCommentCommaLeftBracketRightBracketKeywordQuestionMarkDollarSignAtSignBooleanDotNotDatePathExponential"

var _LexerTokenType_index = [...]uint16{0, 3, 10, 20, 26, 32, 36, 44, 49, 59, 63, 68, 75, 84, 89, 95, 107, 115, 123, 134, 147, 163, 178, 194, 201, 206, 217, 229, 236, 248, 258, 264, 271, 274, 277, 281, 285, 296}

func (i LexerTokenType) String() string {
	i -= 1
	if i >= LexerTokenType(len(_LexerTokenType_index)-1) {
		return "LexerTokenType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _LexerTokenType_name[_LexerTokenType_index[i]:_LexerTokenType_index[i+1]]
}
